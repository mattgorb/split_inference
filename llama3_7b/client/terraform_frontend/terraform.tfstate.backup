{
  "version": 4,
  "terraform_version": "1.10.3",
  "serial": 1427,
  "lineage": "b4087367-9b05-1235-de49-2ec64641b59b",
  "outputs": {
    "frontend_distribution_domain_name": {
      "value": "d2lt92f6mmvv10.cloudfront.net",
      "type": "string"
    },
    "frontend_url": {
      "value": "d2lt92f6mmvv10.cloudfront.net",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "terraform_remote_state",
      "name": "client",
      "provider": "provider[\"terraform.io/builtin/terraform\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "backend": "local",
            "config": {
              "value": {
                "path": "../terraform_backend/terraform.tfstate"
              },
              "type": [
                "object",
                {
                  "path": "string"
                }
              ]
            },
            "defaults": null,
            "outputs": {
              "value": {
                "ecr_repository_url": "637423200636.dkr.ecr.us-east-1.amazonaws.com/model-client-repo",
                "instance_id": "i-02b9b971b09b18d69",
                "instance_private_ip": "10.1.1.93",
                "instance_public_dns": "ec2-44-221-203-57.compute-1.amazonaws.com",
                "instance_public_ip": "44.221.203.57",
                "region": "us-east-1",
                "ssh_command": "ssh ec2-user@44.221.203.57",
                "vpc_peering_connection_id": "pcx-052aa0b64affc1f8d"
              },
              "type": [
                "object",
                {
                  "ecr_repository_url": "string",
                  "instance_id": "string",
                  "instance_private_ip": "string",
                  "instance_public_dns": "string",
                  "instance_public_ip": "string",
                  "region": "string",
                  "ssh_command": "string",
                  "vpc_peering_connection_id": "string"
                }
              ]
            },
            "workspace": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudfront_distribution",
      "name": "frontend_distribution",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "aliases": [],
            "arn": "arn:aws:cloudfront::637423200636:distribution/E1JUXEMMVH3G0H",
            "caller_reference": "terraform-20250109214313421400000001",
            "comment": "Frontend Distribution",
            "continuous_deployment_policy_id": "",
            "custom_error_response": [],
            "default_cache_behavior": [
              {
                "allowed_methods": [
                  "GET",
                  "HEAD"
                ],
                "cache_policy_id": "",
                "cached_methods": [
                  "GET",
                  "HEAD"
                ],
                "compress": false,
                "default_ttl": 3600,
                "field_level_encryption_id": "",
                "forwarded_values": [
                  {
                    "cookies": [
                      {
                        "forward": "none",
                        "whitelisted_names": []
                      }
                    ],
                    "headers": [],
                    "query_string": false,
                    "query_string_cache_keys": []
                  }
                ],
                "function_association": [],
                "grpc_config": [
                  {
                    "enabled": false
                  }
                ],
                "lambda_function_association": [],
                "max_ttl": 86400,
                "min_ttl": 0,
                "origin_request_policy_id": "",
                "realtime_log_config_arn": "",
                "response_headers_policy_id": "",
                "smooth_streaming": false,
                "target_origin_id": "S3-frontend-bucket",
                "trusted_key_groups": [],
                "trusted_signers": [],
                "viewer_protocol_policy": "redirect-to-https"
              }
            ],
            "default_root_object": "index.html",
            "domain_name": "d2lt92f6mmvv10.cloudfront.net",
            "enabled": true,
            "etag": "E3D6N5QQJSD4WX",
            "hosted_zone_id": "Z2FDTNDATAQYW2",
            "http_version": "http2",
            "id": "E1JUXEMMVH3G0H",
            "in_progress_validation_batches": 0,
            "is_ipv6_enabled": true,
            "last_modified_time": "2025-01-22 05:23:31.801 +0000 UTC",
            "logging_config": [],
            "ordered_cache_behavior": [
              {
                "allowed_methods": [
                  "DELETE",
                  "GET",
                  "HEAD",
                  "OPTIONS",
                  "PATCH",
                  "POST",
                  "PUT"
                ],
                "cache_policy_id": "",
                "cached_methods": [
                  "GET",
                  "HEAD"
                ],
                "compress": false,
                "default_ttl": 0,
                "field_level_encryption_id": "",
                "forwarded_values": [
                  {
                    "cookies": [
                      {
                        "forward": "all",
                        "whitelisted_names": []
                      }
                    ],
                    "headers": [
                      "*"
                    ],
                    "query_string": true,
                    "query_string_cache_keys": []
                  }
                ],
                "function_association": [],
                "grpc_config": [
                  {
                    "enabled": false
                  }
                ],
                "lambda_function_association": [],
                "max_ttl": 0,
                "min_ttl": 0,
                "origin_request_policy_id": "",
                "path_pattern": "/generate*",
                "realtime_log_config_arn": "",
                "response_headers_policy_id": "",
                "smooth_streaming": false,
                "target_origin_id": "API-backend",
                "trusted_key_groups": [],
                "trusted_signers": [],
                "viewer_protocol_policy": "redirect-to-https"
              }
            ],
            "origin": [
              {
                "connection_attempts": 3,
                "connection_timeout": 10,
                "custom_header": [],
                "custom_origin_config": [
                  {
                    "http_port": 8000,
                    "https_port": 443,
                    "origin_keepalive_timeout": 5,
                    "origin_protocol_policy": "http-only",
                    "origin_read_timeout": 30,
                    "origin_ssl_protocols": [
                      "TLSv1.2"
                    ]
                  }
                ],
                "domain_name": "ec2-44-221-203-57.compute-1.amazonaws.com",
                "origin_access_control_id": null,
                "origin_id": "API-backend",
                "origin_path": "",
                "origin_shield": [],
                "s3_origin_config": [],
                "vpc_origin_config": []
              },
              {
                "connection_attempts": 3,
                "connection_timeout": 10,
                "custom_header": [],
                "custom_origin_config": [],
                "domain_name": "model-frontend-bucket.s3.us-east-1.amazonaws.com",
                "origin_access_control_id": "",
                "origin_id": "S3-frontend-bucket",
                "origin_path": "",
                "origin_shield": [],
                "s3_origin_config": [
                  {
                    "origin_access_identity": ""
                  }
                ],
                "vpc_origin_config": []
              }
            ],
            "origin_group": [],
            "price_class": "PriceClass_100",
            "restrictions": [
              {
                "geo_restriction": [
                  {
                    "locations": [],
                    "restriction_type": "none"
                  }
                ]
              }
            ],
            "retain_on_delete": false,
            "staging": false,
            "status": "Deployed",
            "tags": {},
            "tags_all": {},
            "trusted_key_groups": [
              {
                "enabled": false,
                "items": []
              }
            ],
            "trusted_signers": [
              {
                "enabled": false,
                "items": []
              }
            ],
            "viewer_certificate": [
              {
                "acm_certificate_arn": "",
                "cloudfront_default_certificate": true,
                "iam_certificate_id": "",
                "minimum_protocol_version": "TLSv1",
                "ssl_support_method": ""
              }
            ],
            "wait_for_deployment": true,
            "web_acl_id": ""
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "frontend",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::model-frontend-bucket",
            "bucket": "model-frontend-bucket",
            "bucket_domain_name": "model-frontend-bucket.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "model-frontend-bucket.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": true,
            "grant": [
              {
                "id": "b7623e6ad9355c7caa40da002d27323ff2c1fc46de14a0f00b50cd4ce9912e8a",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "model-frontend-bucket",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "{\"Statement\":[{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"arn:aws:s3:::model-frontend-bucket/*\",\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {},
            "tags_all": {},
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [
              {
                "error_document": "",
                "index_document": "index.html",
                "redirect_all_requests_to": "",
                "routing_rules": ""
              }
            ],
            "website_domain": "s3-website-us-east-1.amazonaws.com",
            "website_endpoint": "model-frontend-bucket.s3-website-us-east-1.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_policy",
      "name": "frontend",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "model-frontend-bucket",
            "id": "model-frontend-bucket",
            "policy": "{\"Statement\":[{\"Action\":\"s3:GetObject\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Resource\":\"arn:aws:s3:::model-frontend-bucket/*\",\"Sid\":\"PublicReadGetObject\"}],\"Version\":\"2012-10-17\"}"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.frontend",
            "aws_s3_bucket_public_access_block.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "frontend",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "block_public_acls": false,
            "block_public_policy": false,
            "bucket": "model-frontend-bucket",
            "id": "model-frontend-bucket",
            "ignore_public_acls": false,
            "restrict_public_buckets": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_website_configuration",
      "name": "frontend",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket": "model-frontend-bucket",
            "error_document": [],
            "expected_bucket_owner": "",
            "id": "model-frontend-bucket",
            "index_document": [
              {
                "suffix": "index.html"
              }
            ],
            "redirect_all_requests_to": [],
            "routing_rule": [],
            "routing_rules": "",
            "website_domain": "s3-website-us-east-1.amazonaws.com",
            "website_endpoint": "model-frontend-bucket.s3-website-us-east-1.amazonaws.com"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "about_page",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::model-frontend-bucket/about.html",
            "bucket": "model-frontend-bucket",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": null,
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "89e11f01fbfd733f0d687afc4d1e6f63",
            "force_destroy": true,
            "id": "about.html",
            "key": "about.html",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": "../frontend/about.html",
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {},
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "frontend_image",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::model-frontend-bucket/image.jpg",
            "bucket": "model-frontend-bucket",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": null,
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "image/jpeg",
            "etag": "a2a248115d6140eedaec287b47797b4d",
            "force_destroy": false,
            "id": "image.jpg",
            "key": "image.jpg",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": "../frontend/image.jpg",
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {},
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_object",
      "name": "frontend_object",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": null,
            "arn": "arn:aws:s3:::model-frontend-bucket/index.html",
            "bucket": "model-frontend-bucket",
            "bucket_key_enabled": false,
            "cache_control": "",
            "checksum_algorithm": null,
            "checksum_crc32": "",
            "checksum_crc32c": "",
            "checksum_sha1": "",
            "checksum_sha256": "",
            "content": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\"\u003e\n    \u003ctitle\u003eSecure Llama\u003c/title\u003e\n    \u003cstyle\u003e\n        /* [Your existing CSS styles here] */\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        html, body {\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n            background-color: #121212;\n            color: #e0e0e0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        .container {\n            width: 95%;\n            max-width: 600px;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            padding: 8px 0;\n        }\n\n        .header {\n            width: 100%;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 8px 0;\n        }\n\n        .title {\n            font-size: 20px;\n            font-weight: bold;\n            color: #4caf50;\n        }\n\n        .about-link {\n            padding: 6px 10px;\n            background: #333;\n            color: #e0e0e0;\n            border: 1px solid #444;\n            border-radius: 6px;\n            cursor: pointer;\n            text-decoration: none;\n            font-size: 14px;\n        }\n\n        .slider-container {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            background: #1e1e1e;\n            padding: 10px;\n            border-radius: 6px;\n            border: 1px solid #444;\n        }\n\n        .slider-label {\n            font-size: 13px;\n        }\n\n        .slider-controls {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .slider {\n            flex: 1;\n            -webkit-appearance: none;\n            height: 4px;\n            background: #444;\n            border-radius: 2px;\n            outline: none;\n        }\n\n        .slider::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background: #4caf50;\n            cursor: pointer;\n        }\n\n        .slider-value {\n            font-size: 13px;\n            min-width: 30px;\n        }\n\n        #chat-container {\n            flex: 1;\n            background: #1e1e1e;\n            border-radius: 8px;\n            border: 1px solid #333;\n            overflow-y: auto;\n            padding: 10px;\n            margin: 4px 0;\n        }\n\n        .message {\n            padding: 8px 10px;\n            border-radius: 8px;\n            margin: 4px 0;\n            max-width: 85%;\n            word-wrap: break-word;\n            font-size: 14px;\n        }\n\n        .user-message {\n            align-self: flex-end;\n            background: #4caf50;\n            color: #fff;\n            margin-left: auto;\n        }\n\n        .bot-message {\n            align-self: flex-start;\n            background: #333;\n            color: #e0e0e0;\n        }\n\n        #input-container {\n            display: flex;\n            gap: 4px;\n            width: 100%;\n            padding: 4px 0;\n        }\n\n        #message-input {\n            flex: 1;\n            padding: 8px 10px;\n            font-size: 14px;\n            background: #1e1e1e;\n            color: #e0e0e0;\n            border: 1px solid #333;\n            border-radius: 6px;\n            outline: none;\n        }\n\n        #send-button {\n            padding: 8px 12px;\n            background: #444;\n            color: #fff;\n            font-size: 14px;\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n        }\n\n        @media (min-width: 768px) {\n            .container {\n                gap: 10px;\n                padding: 10px 0;\n            }\n\n            .slider-container {\n                flex-direction: row;\n                align-items: center;\n                padding: 12px 15px;\n            }\n\n            .slider-label {\n                font-size: 14px;\n                white-space: nowrap;\n                min-width: 200px;\n            }\n\n            .message {\n                padding: 10px 12px;\n                font-size: 15px;\n            }\n\n            #message-input, #send-button {\n                padding: 10px 12px;\n                font-size: 15px;\n            }\n\n            .title {\n                font-size: 24px;\n            }\n\n            .about-link {\n                padding: 8px 15px;\n                font-size: 15px;\n            }\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"header\"\u003e\n            \u003cdiv class=\"title\"\u003eSecure Llama\u003c/div\u003e\n            \u003ca href=\"about.html\" class=\"about-link\"\u003eAbout\u003c/a\u003e\n        \u003c/div\u003e\n        \u003c!-- --\u003e\n        \u003cdiv style=\"color: #ff4444; font-size: 0.7em; display: block;\"\u003e\n            API is currently disabled to avoid incurring costs on AWS\n        \u003c/div\u003e\n\n        \u003cdiv class=\"slider-container\"\u003e\n            \u003clabel class=\"slider-label\"\u003eEmbedding L2-Norm Noise Ratio:\u003c/label\u003e\n            \u003cdiv class=\"slider-controls\"\u003e\n                \u003cinput type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\" class=\"slider\" id=\"noise-ratio\"\u003e\n                \u003cspan class=\"slider-value\" id=\"noise-ratio-value\"\u003e0.5\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv id=\"chat-container\"\u003e\u003c/div\u003e\n        \n        \u003cdiv id=\"input-container\"\u003e\n            \u003cinput type=\"text\" id=\"message-input\" placeholder=\"Type your message here...\" /\u003e\n            \u003cbutton id=\"send-button\"\u003eSend\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n        const chatContainer = document.getElementById(\"chat-container\");\n        const messageInput = document.getElementById(\"message-input\");\n        const sendButton = document.getElementById(\"send-button\");\n        const noiseRatioSlider = document.getElementById(\"noise-ratio\");\n        const noiseRatioValue = document.getElementById(\"noise-ratio-value\");\n\n        noiseRatioSlider.addEventListener(\"input\", (e) =\u003e {\n            noiseRatioValue.textContent = parseFloat(e.target.value).toFixed(2);\n        });\n\n        // Placeholders for server URL and credentials\n        const serverStreamUrl = \"https://d2lt92f6mmvv10.cloudfront.net/generate_stream\"; \n        const username = \"UStAilaN\";\n        const password = \"pK9#mJ4$xL2@\";\n\n        let chatHistory = [];\n\n        /**\n         * Append a message to the chat UI.\n         * @param {string} content - Text to display\n         * @param {boolean} isUser - If true, style as user message; otherwise bot\n         */\n        function appendMessage(content, isUser = true) {\n            const message = document.createElement(\"div\");\n            message.className = \"message \" + (isUser ? \"user-message\" : \"bot-message\");\n            message.textContent = content;\n            chatContainer.appendChild(message);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n\n            // Update chat history\n            chatHistory.push({ content, isUser });\n\n            // Save updated chat history to sessionStorage\n            sessionStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n        }\n\n        /**\n         * Construct the history string in the format:\n         * \"Human: {chat1 request} Assistant: {chat1 response} Human: {chat2 request} Assistant: {chat2 response} ...\"\n         * @returns {string} - Formatted history string\n         */\n        function constructHistory() {\n            return chatHistory.map(msg =\u003e {\n                return msg.isUser ? \"Human: \" + msg.content : \"Assistant: \" + msg.content;\n            }).join(' ');\n        }\n\n        /**\n         * Send the user's prompt to the server (streaming),\n         * and append tokens as they arrive.\n         */\n        async function sendMessage() {\n            const userMessage = messageInput.value.trim();\n            if (!userMessage) return;\n\n            // 1. Display user's message in UI\n            appendMessage(userMessage, true);\n            messageInput.value = \"\";\n\n            // 2. Prepare a placeholder for the streaming bot response\n            const botMessageEl = document.createElement(\"div\");\n            botMessageEl.className = \"message bot-message\";\n            botMessageEl.textContent = \"...\";\n            chatContainer.appendChild(botMessageEl);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n\n            try {\n                // 3. Construct the history string\n                const historyString = constructHistory();\n\n                // 4. Set up the POST body for your streaming endpoint\n                const requestData = {\n                    prompt: userMessage,\n                    max_length: 512,\n                    temperature: 1.0,\n                    l2_norm: parseFloat(noiseRatioSlider.value),\n                    history: historyString\n                };\n\n                // 5. Make the fetch call to /generate_stream\n                const response = await fetch(serverStreamUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": \"Basic \" + btoa(username + \":\" + password)\n                    },\n                    body: JSON.stringify(requestData)\n                });\n\n                // Check if the response is OK\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    botMessageEl.textContent =\n                        \"Error: Server responded with status \" +\n                        response.status + \" - \" + errorText;\n                    return;\n                }\n\n                // 6. Read the response as a stream of text\n                const reader = response.body.getReader();\n                const decoder = new TextDecoder(\"utf-8\");\n                let doneReading = false;\n\n                // We'll accumulate chunks here\n                let partialText = \"\";\n\n                while (!doneReading) {\n                    const { value, done } = await reader.read();\n                    if (done) {\n                        doneReading = true;\n                        break;\n                    }\n                    // Convert Uint8Array chunk to string with replacement for invalid chars\n                    const chunk = decoder.decode(value, { stream: true });\n                    partialText += chunk;\n\n                    // Check if \"Human:\" is in the latest part of partialText\n                    const assistantResponse = partialText.split(\"Assistant:\").pop() || partialText;\n                    if (assistantResponse.includes(\"Human:\")) {\n                        // Remove everything after \"Human:\"\n                        partialText = partialText.split(\"Human:\")[0];\n                        doneReading = true;\n                    }\n\n                    // Update the bot message element with the partial text\n                    botMessageEl.textContent = partialText;\n                    chatContainer.scrollTop = chatContainer.scrollHeight;\n                }\n\n                // 7. Append the final AI response to chatHistory\n                appendMessage(partialText, false);\n                // Remove the placeholder\n                chatContainer.removeChild(botMessageEl);\n\n            } catch (error) {\n                botMessageEl.textContent =\n                    \"Error: Network error or server is unreachable. Details: \" + error.message;\n            }\n        }\n\n        sendButton.addEventListener(\"click\", sendMessage);\n        messageInput.addEventListener(\"keydown\", (e) =\u003e {\n            if (e.key === \"Enter\") {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n\n        // **Added Code Starts Here**\n\n        /**\n         * Load chat history from sessionStorage on page load\n         */\n        window.addEventListener(\"DOMContentLoaded\", () =\u003e {\n            const storedChatHistory = sessionStorage.getItem(\"chatHistory\");\n            if (storedChatHistory) {\n                try {\n                    chatHistory = JSON.parse(storedChatHistory);\n                    chatHistory.forEach(msg =\u003e appendMessage(msg.content, msg.isUser));\n                } catch (e) {\n                    console.error(\"Failed to parse chat history from sessionStorage:\", e);\n                    sessionStorage.removeItem(\"chatHistory\");\n                    chatHistory = [];\n                }\n            }\n        });\n\n        /**\n         * Clear chat history from sessionStorage when the page is refreshed or navigated away\n         */\n        window.addEventListener(\"beforeunload\", () =\u003e {\n            sessionStorage.removeItem(\"chatHistory\");\n        });\n\n        // **Added Code Ends Here**\n    \u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n",
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "text/html",
            "etag": "497bd291e465c92d0d92b9d628b8e66d",
            "force_destroy": false,
            "id": "index.html",
            "key": "index.html",
            "kms_key_id": null,
            "metadata": {},
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "override_provider": [],
            "server_side_encryption": "AES256",
            "source": null,
            "source_hash": null,
            "storage_class": "STANDARD",
            "tags": {},
            "tags_all": {},
            "version_id": "",
            "website_redirect": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_cloudfront_distribution.frontend_distribution",
            "aws_s3_bucket.frontend",
            "local_file.index_html"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "index_html",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\"\u003e\n    \u003ctitle\u003eSecure Llama\u003c/title\u003e\n    \u003cstyle\u003e\n        /* [Your existing CSS styles here] */\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        html, body {\n            height: 100%;\n            width: 100%;\n            overflow: hidden;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n            background-color: #121212;\n            color: #e0e0e0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        .container {\n            width: 95%;\n            max-width: 600px;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            padding: 8px 0;\n        }\n\n        .header {\n            width: 100%;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 8px 0;\n        }\n\n        .title {\n            font-size: 20px;\n            font-weight: bold;\n            color: #4caf50;\n        }\n\n        .about-link {\n            padding: 6px 10px;\n            background: #333;\n            color: #e0e0e0;\n            border: 1px solid #444;\n            border-radius: 6px;\n            cursor: pointer;\n            text-decoration: none;\n            font-size: 14px;\n        }\n\n        .slider-container {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            background: #1e1e1e;\n            padding: 10px;\n            border-radius: 6px;\n            border: 1px solid #444;\n        }\n\n        .slider-label {\n            font-size: 13px;\n        }\n\n        .slider-controls {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .slider {\n            flex: 1;\n            -webkit-appearance: none;\n            height: 4px;\n            background: #444;\n            border-radius: 2px;\n            outline: none;\n        }\n\n        .slider::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background: #4caf50;\n            cursor: pointer;\n        }\n\n        .slider-value {\n            font-size: 13px;\n            min-width: 30px;\n        }\n\n        #chat-container {\n            flex: 1;\n            background: #1e1e1e;\n            border-radius: 8px;\n            border: 1px solid #333;\n            overflow-y: auto;\n            padding: 10px;\n            margin: 4px 0;\n        }\n\n        .message {\n            padding: 8px 10px;\n            border-radius: 8px;\n            margin: 4px 0;\n            max-width: 85%;\n            word-wrap: break-word;\n            font-size: 14px;\n        }\n\n        .user-message {\n            align-self: flex-end;\n            background: #4caf50;\n            color: #fff;\n            margin-left: auto;\n        }\n\n        .bot-message {\n            align-self: flex-start;\n            background: #333;\n            color: #e0e0e0;\n        }\n\n        #input-container {\n            display: flex;\n            gap: 4px;\n            width: 100%;\n            padding: 4px 0;\n        }\n\n        #message-input {\n            flex: 1;\n            padding: 8px 10px;\n            font-size: 14px;\n            background: #1e1e1e;\n            color: #e0e0e0;\n            border: 1px solid #333;\n            border-radius: 6px;\n            outline: none;\n        }\n\n        #send-button {\n            padding: 8px 12px;\n            background: #444;\n            color: #fff;\n            font-size: 14px;\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n        }\n\n        @media (min-width: 768px) {\n            .container {\n                gap: 10px;\n                padding: 10px 0;\n            }\n\n            .slider-container {\n                flex-direction: row;\n                align-items: center;\n                padding: 12px 15px;\n            }\n\n            .slider-label {\n                font-size: 14px;\n                white-space: nowrap;\n                min-width: 200px;\n            }\n\n            .message {\n                padding: 10px 12px;\n                font-size: 15px;\n            }\n\n            #message-input, #send-button {\n                padding: 10px 12px;\n                font-size: 15px;\n            }\n\n            .title {\n                font-size: 24px;\n            }\n\n            .about-link {\n                padding: 8px 15px;\n                font-size: 15px;\n            }\n        }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"header\"\u003e\n            \u003cdiv class=\"title\"\u003eSecure Llama\u003c/div\u003e\n            \u003ca href=\"about.html\" class=\"about-link\"\u003eAbout\u003c/a\u003e\n        \u003c/div\u003e\n        \u003c!-- --\u003e\n        \u003cdiv style=\"color: #ff4444; font-size: 0.7em; display: block;\"\u003e\n            API is currently disabled to avoid incurring costs on AWS\n        \u003c/div\u003e\n\n        \u003cdiv class=\"slider-container\"\u003e\n            \u003clabel class=\"slider-label\"\u003eEmbedding L2-Norm Noise Ratio:\u003c/label\u003e\n            \u003cdiv class=\"slider-controls\"\u003e\n                \u003cinput type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\" class=\"slider\" id=\"noise-ratio\"\u003e\n                \u003cspan class=\"slider-value\" id=\"noise-ratio-value\"\u003e0.5\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv id=\"chat-container\"\u003e\u003c/div\u003e\n        \n        \u003cdiv id=\"input-container\"\u003e\n            \u003cinput type=\"text\" id=\"message-input\" placeholder=\"Type your message here...\" /\u003e\n            \u003cbutton id=\"send-button\"\u003eSend\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cscript\u003e\n        const chatContainer = document.getElementById(\"chat-container\");\n        const messageInput = document.getElementById(\"message-input\");\n        const sendButton = document.getElementById(\"send-button\");\n        const noiseRatioSlider = document.getElementById(\"noise-ratio\");\n        const noiseRatioValue = document.getElementById(\"noise-ratio-value\");\n\n        noiseRatioSlider.addEventListener(\"input\", (e) =\u003e {\n            noiseRatioValue.textContent = parseFloat(e.target.value).toFixed(2);\n        });\n\n        // Placeholders for server URL and credentials\n        const serverStreamUrl = \"https://d2lt92f6mmvv10.cloudfront.net/generate_stream\"; \n        const username = \"UStAilaN\";\n        const password = \"pK9#mJ4$xL2@\";\n\n        let chatHistory = [];\n\n        /**\n         * Append a message to the chat UI.\n         * @param {string} content - Text to display\n         * @param {boolean} isUser - If true, style as user message; otherwise bot\n         */\n        function appendMessage(content, isUser = true) {\n            const message = document.createElement(\"div\");\n            message.className = \"message \" + (isUser ? \"user-message\" : \"bot-message\");\n            message.textContent = content;\n            chatContainer.appendChild(message);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n\n            // Update chat history\n            chatHistory.push({ content, isUser });\n\n            // Save updated chat history to sessionStorage\n            sessionStorage.setItem(\"chatHistory\", JSON.stringify(chatHistory));\n        }\n\n        /**\n         * Construct the history string in the format:\n         * \"Human: {chat1 request} Assistant: {chat1 response} Human: {chat2 request} Assistant: {chat2 response} ...\"\n         * @returns {string} - Formatted history string\n         */\n        function constructHistory() {\n            return chatHistory.map(msg =\u003e {\n                return msg.isUser ? \"Human: \" + msg.content : \"Assistant: \" + msg.content;\n            }).join(' ');\n        }\n\n        /**\n         * Send the user's prompt to the server (streaming),\n         * and append tokens as they arrive.\n         */\n        async function sendMessage() {\n            const userMessage = messageInput.value.trim();\n            if (!userMessage) return;\n\n            // 1. Display user's message in UI\n            appendMessage(userMessage, true);\n            messageInput.value = \"\";\n\n            // 2. Prepare a placeholder for the streaming bot response\n            const botMessageEl = document.createElement(\"div\");\n            botMessageEl.className = \"message bot-message\";\n            botMessageEl.textContent = \"...\";\n            chatContainer.appendChild(botMessageEl);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n\n            try {\n                // 3. Construct the history string\n                const historyString = constructHistory();\n\n                // 4. Set up the POST body for your streaming endpoint\n                const requestData = {\n                    prompt: userMessage,\n                    max_length: 512,\n                    temperature: 1.0,\n                    l2_norm: parseFloat(noiseRatioSlider.value),\n                    history: historyString\n                };\n\n                // 5. Make the fetch call to /generate_stream\n                const response = await fetch(serverStreamUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": \"Basic \" + btoa(username + \":\" + password)\n                    },\n                    body: JSON.stringify(requestData)\n                });\n\n                // Check if the response is OK\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    botMessageEl.textContent =\n                        \"Error: Server responded with status \" +\n                        response.status + \" - \" + errorText;\n                    return;\n                }\n\n                // 6. Read the response as a stream of text\n                const reader = response.body.getReader();\n                const decoder = new TextDecoder(\"utf-8\");\n                let doneReading = false;\n\n                // We'll accumulate chunks here\n                let partialText = \"\";\n\n                while (!doneReading) {\n                    const { value, done } = await reader.read();\n                    if (done) {\n                        doneReading = true;\n                        break;\n                    }\n                    // Convert Uint8Array chunk to string with replacement for invalid chars\n                    const chunk = decoder.decode(value, { stream: true });\n                    partialText += chunk;\n\n                    // Check if \"Human:\" is in the latest part of partialText\n                    const assistantResponse = partialText.split(\"Assistant:\").pop() || partialText;\n                    if (assistantResponse.includes(\"Human:\")) {\n                        // Remove everything after \"Human:\"\n                        partialText = partialText.split(\"Human:\")[0];\n                        doneReading = true;\n                    }\n\n                    // Update the bot message element with the partial text\n                    botMessageEl.textContent = partialText;\n                    chatContainer.scrollTop = chatContainer.scrollHeight;\n                }\n\n                // 7. Append the final AI response to chatHistory\n                appendMessage(partialText, false);\n                // Remove the placeholder\n                chatContainer.removeChild(botMessageEl);\n\n            } catch (error) {\n                botMessageEl.textContent =\n                    \"Error: Network error or server is unreachable. Details: \" + error.message;\n            }\n        }\n\n        sendButton.addEventListener(\"click\", sendMessage);\n        messageInput.addEventListener(\"keydown\", (e) =\u003e {\n            if (e.key === \"Enter\") {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n\n        // **Added Code Starts Here**\n\n        /**\n         * Load chat history from sessionStorage on page load\n         */\n        window.addEventListener(\"DOMContentLoaded\", () =\u003e {\n            const storedChatHistory = sessionStorage.getItem(\"chatHistory\");\n            if (storedChatHistory) {\n                try {\n                    chatHistory = JSON.parse(storedChatHistory);\n                    chatHistory.forEach(msg =\u003e appendMessage(msg.content, msg.isUser));\n                } catch (e) {\n                    console.error(\"Failed to parse chat history from sessionStorage:\", e);\n                    sessionStorage.removeItem(\"chatHistory\");\n                    chatHistory = [];\n                }\n            }\n        });\n\n        /**\n         * Clear chat history from sessionStorage when the page is refreshed or navigated away\n         */\n        window.addEventListener(\"beforeunload\", () =\u003e {\n            sessionStorage.removeItem(\"chatHistory\");\n        });\n\n        // **Added Code Ends Here**\n    \u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n",
            "content_base64": null,
            "content_base64sha256": "/2/qGA1uvWif9tiJK9fwIxkGhp+F7sZcj2ilGUi8qeQ=",
            "content_base64sha512": "KKIbv6sdIphL3WovvclZj2KBPiUDQEoR5Fz8iqZdEqf8d1ev+aHkvQVUMvtRY2KAUWvCtS4WtXsvFlRCVi5m1A==",
            "content_md5": "497bd291e465c92d0d92b9d628b8e66d",
            "content_sha1": "880df12f60b929be38ef01858d551e3e9437a474",
            "content_sha256": "ff6fea180d6ebd689ff6d8892bd7f0231906869f85eec65c8f68a51948bca9e4",
            "content_sha512": "28a21bbfab1d22984bdd6a2fbdc9598f62813e2503404a11e45cfc8aa65d12a7fc7757aff9a1e4bd055432fb51636280516bc2b52e16b57b2f165442562e66d4",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "../frontend/index.html",
            "id": "880df12f60b929be38ef01858d551e3e9437a474",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "sensitive_content"
              }
            ]
          ],
          "dependencies": [
            "aws_cloudfront_distribution.frontend_distribution",
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "null_resource",
      "name": "invalidate_cache",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3228333512381751393",
            "triggers": {
              "always_run": "2025-01-22T05:23:30Z"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "aws_cloudfront_distribution.frontend_distribution",
            "aws_s3_bucket.frontend"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
